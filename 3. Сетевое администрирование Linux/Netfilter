# Netfilter и управление трафиком с iptables

## Введение
В рамках курса по системному администрированию Linux я изучил тему Netfilter и управления трафиком с помощью `iptables`. Netfilter — это фреймворк для фильтрации и управления сетевым трафиком в ядре Linux. 
`iptables` — это утилита, которая позволяет настраивать правила для фильтрации и управления трафиком. В этой теме я освоил создание правил для блокировки и пропуска трафика, а также настройку политик по умолчанию.

---

## Основные концепции

### 1. Основы пакетных фильтров
- **Пакетный фильтр**: Механизм, который анализирует сетевые пакеты и принимает решение о их пропуске или блокировке.
- **Пример**: Использование `iptables` для фильтрации трафика.

### 2. Работа с iptables
- **iptables**: Утилита для настройки правил фильтрации трафика в Linux.
- **Пример**: Блокировка входящего трафика на определённый порт.

### 3. Управление трафиком с iptables
- **Цепочки**: INPUT, OUTPUT, FORWARD — основные цепочки для управления трафиком.
- **Пример**: Настройка правил для разрешения или блокировки трафика.

---

## Практическая работа: Настройка iptables

### Цель практической работы
Освоить создание правил `iptables` для управления трафиком, включая блокировку и пропуск трафика по определённым признакам.

### Задание 1. Установка sshd на Ubuntu

#### Что нужно сделать
1. Установите OpenSSH на виртуальной машине Ubuntu.
2. Проверьте, что демон SSH (sshd) работает на TCP-порту и прослушивает входящие запросы на подключение.

#### Шаги выполнения

1. **Установка OpenSSH**:
    >> sudo apt-get update
    >> sudo apt-get install openssh-server

### Проверка работы SSH:
    >> sudo netstat -ntlp | grep sshd

### Задание 2. DROP по умолчанию в цепочке INPUT

### Что нужно сделать
- Установить политику по умолчанию DROP для цепочки INPUT.

### Шаги выполнения

### Установка политики DROP для INPUT:
    >> sudo iptables -P INPUT DROP

### Проверка доступа к сайту:
    >> Попробовать открыть сайт www.google.com в браузере.

### Задание 3. ACCEPT по умолчанию в цепочке OUTPUT

### Что нужно сделать
- Установить политику по умолчанию DROP для цепочки INPUT и ACCEPT для OUTPUT. 
- Настроить цепочку INPUT так, чтобы она принимала весь входящий веб-трафик на порт 80 и отбрасывала любой другой входящий трафик.
- Проверитьь, можем ли мы посетить сайт mail.ru.

### Шаги выполнения

### Установка политик:
    >> sudo iptables -P INPUT DROP
    >> sudo iptables -P OUTPUT ACCEPT

Разрешение веб-трафика на порт 80:
    >> sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT

### Проверка доступа к сайту:
    >> Попробуем открыть сайт mail.ru в браузере.

### Задание 4. ACCEPT для трафика SSH

### Что нужно сделать
- Разрешить SSH-трафик в цепочке INPUT.
- Проверить, что можем подключиться к SSH-серверу с другой машины.

### Шаги выполнения

### Разрешение SSH-трафика:
    >> sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT

### Проверка подключения:
    >> Подключаемся к SSH-серверу с другой машины:
    >> ssh user@ip_address

### Задание 5. ACCEPT/DROP для цепочек INPUT/OUTPUT

### Что нужно сделать
- Настроить таблицу filter так, чтобы сеансы, исходящие от виртуальной машины, были успешными, а сеансы, исходящие с удалённого компьютера на виртуальную машину, были заблокированы.

### Шаги выполнения

### Настройка правил:
    >> sudo iptables -P INPUT DROP
    >> sudo iptables -P OUTPUT ACCEPT

### Объяснение:
    >> Политика DROP для INPUT блокирует входящий трафик, а ACCEPT для OUTPUT разрешает исходящий трафик.

### Задание 6. DROP INPUT & OUTPUT

### Что нужно сделать
- Установить политику по умолчанию DROP для цепочек INPUT и OUTPUT.
- Настроить правила для разрешения пинга в разных направлениях.

### Шаги выполнения

### Установка политик:
    >> sudo iptables -P INPUT DROP
    >> sudo iptables -P OUTPUT DROP

### Разрешение пинга:
    >> Разрешить пинг от удалённых машин к локальной:
    >> sudo iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
    >> sudo iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT

### Задание 7. 2 concurrent SSH

### Что нужно сделать
- Настроить таблицу filter так, чтобы количество активных SSH-подключений к виртуальной машине было равно 2.
- Проверить работу этого правила, попытавшись открыть три SSH-подключения.

### Шаги выполнения

### Настройка ограничения SSH-подключений:
    >> sudo iptables -A INPUT -p tcp --dport 22 -m connlimit --connlimit-above 2 -j DROP

### Проверка подключений:
    >> Попробовать открыть три SSH-подключения с другой машины.

### Вывод и обобщение

### Что было изучено:
- Настройка правил iptables для управления трафиком.
- Установка политик по умолчанию для цепочек INPUT и OUTPUT.
- Разрешение и блокировка трафика по определённым признакам.

### Что было сделано:
- Установлен и настроен SSH-сервер.
- Настроены правила для блокировки и пропуска трафика.
- Проведена проверка работы правил.

### Результаты:
- Успешно выполнены все шаги практической работы.
- Освоены навыки работы с iptables для управления сетевым трафиком.

### Заключение
- В ходе изучения темы "Netfilter и управление трафиком с iptables" я освоил ключевые аспекты настройки правил для фильтрации и управления трафиком. Практическая работа помогла закрепить знания по созданию и п
роверке правил iptables. Эти навыки важны для обеспечения безопасности и управления сетевым трафиком в Linux.
