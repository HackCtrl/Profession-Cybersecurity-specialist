2. Реляционные базы данных и язык запросов SQL
Введение
В рамках курса "Специалист по кибербезопасности", в модуле "Безопасность баз данных", я изучил раздел "Реляционные базы данных и язык запросов SQL". Этот раздел стал для меня ключевым этапом в понимании работы реляционных баз данных (РБД), их структуры, типов данных, связей между таблицами, а также языка SQL, который используется для управления данными и структурой баз данных. Я глубоко погрузился в теоретические аспекты, освоил работу с MySQL через phpMyAdmin, изучил различные типы SQL-запросов и выполнил практические задания, которые помогли мне закрепить полученные знания. В этом обобщении я подробно опишу процесс изучения, включая теоретические основы, шаги выполнения практических заданий, результаты и выводы, которые я сделал.

Теоретические основы
1. Основы реляционных баз данных
Я начал изучение с основ реляционных баз данных. Реляционные базы данных (РБД) — это базы данных, в которых данные организованы в виде таблиц, связанных между собой. Слово "реляционный" происходит от английского "relation" (связь), что отражает ключевое свойство РБД — наличие связей между таблицами.
Я рассмотрел пример базы данных интернет-магазина книг. В такой базе данные хранятся в таблицах, например, таблица "Книги" с полями: название, год выпуска и автор. Однако, чтобы избежать дублирования данных об авторах (например, года рождения), я изучил, как создавать отдельную таблицу "Авторы" и связывать её с таблицей "Книги" через идентификаторы (ID). Это позволило мне понять, как РБД помогают эффективно организовать данные, минимизируя дублирование и упрощая их обновление.
Каждая таблица в РБД состоит из столбцов (полей) и строк (записей). Я усвоил, что столбцы принято называть полями, а строки — записями, и что у каждой записи есть уникальный идентификатор (ID), который позволяет связывать таблицы. Также я узнал, что имена полей обычно пишутся по-английски с использованием символа подчёркивания вместо пробелов (например, author_id).
2. Типы полей и связей в реляционных базах данных
Далее я изучил типы полей, которые используются в РБД, на примере MySQL.
Числовые поля
Я познакомился с числовыми типами полей:

TINYINT: для хранения целых чисел от -128 до 127 (1 байт).
INT: для хранения целых чисел от -2,147,483,648 до 2,147,483,647 (4 байта).
BIGINT: для больших целых чисел от -2⁶³ до 2⁶³-1.
FLOAT и DOUBLE: для дробных чисел, с разным диапазоном (FLOAT: от 1.17×10⁻³⁸ до 3.4×10³⁸, DOUBLE: от 2.2×10⁻³⁰⁸ до 1.8×10³⁰⁸).

Я также узнал, что поля могут иметь значение NULL, если данные не указаны, но можно пометить поле как NOT NULL, чтобы требовать обязательное заполнение.
Поля с датой и временем
Я изучил типы полей для хранения дат и времени:

DATETIME: хранит дату и время (например, 2021-01-30 22:45:07), диапазон от 1000 до 9999 года.
DATE: хранит только дату (например, 2021-01-30).
TIMESTAMP: хранит метки времени (секунды с 1 января 1970 года), диапазон от 1970 до 2038 года.

Текстовые поля
Я рассмотрел текстовые типы полей:

CHAR(N): фиксированная длина (до 255 символов), например, CHAR(6) для строк длиной ровно 6 символов.
VARCHAR(N): переменная длина (до 65,536 символов в новых версиях MySQL).
TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT: для хранения текстов разной длины (от 255 до 4+ миллиардов символов).
ENUM: для хранения одного значения из заранее заданного списка (например, ENUM('MALE', 'FEMALE')).

Другие типы полей
Я изучил формат JSON, который позволяет хранить структурированные данные (например, {"id":57676, "name":"Ноутбук ASUS YP-756"}). Это полезно для хранения сложных данных, таких как свойства товаров.
Типы связей между таблицами
Я освоил три типа связей между таблицами:

Один ко многим: одна запись в одной таблице связана с несколькими записями в другой (например, один автор — много книг). Связь реализуется через поле author_id в таблице "Книги", ссылающееся на id в таблице "Авторы".
Один к одному: одна запись в одной таблице связана с одной записью в другой (например, страна и её столица). Связь обеспечивается уникальным полем (с атрибутом UNIQUE).
Многие ко многим: несколько записей в одной таблице связаны с несколькими записями в другой (например, книги и заказы). Для этого создаётся промежуточная таблица (например, order2book), где хранятся пары book_id и order_id.

3. Язык запросов SQL
Я изучил, что РБД также называют SQL-базами, поскольку для работы с ними используется язык SQL (Structured Query Language — язык структурированных запросов). SQL позволяет:

Создавать, изменять и удалять базы данных и таблицы.
Добавлять, получать, изменять и удалять данные.

Я узнал, что SQL-запросы — это единственный способ взаимодействия с РБД, даже если пользователь использует графический интерфейс, например, phpMyAdmin.
4. Работа с MySQL через phpMyAdmin
Я познакомился с процессом настройки базы данных MySQL на хостинге Timeweb. Я зарегистрировался на Timeweb, создал базу данных MySQL через личный кабинет и подключился к ней через phpMyAdmin — удобный инструмент для управления базами данных, написанный на PHP. Затем я загрузил дамп базы данных (файл с её структурой и данными) через вкладку "Импорт" в phpMyAdmin, что позволило мне начать работу с готовой базой интернет-магазина.
Я изучил структуру дампа: он состоит из SQL-запросов, которые создают таблицы и заполняют их данными. Это дало мне понимание, как можно экспортировать и импортировать базы данных.

Практическая работа
1. Работа с SELECT-запросами и фильтрацией данных
Я изучил SELECT-запросы, которые используются для получения данных из базы.
Простой SELECT-запрос
Я начал с базового запроса:
SELECT * FROM tableName;

Этот запрос возвращает все поля и записи из указанной таблицы. Я выполнил его в phpMyAdmin, чтобы просмотреть содержимое таблицы good (товары).
Вывод определённых полей
Я научился выбирать конкретные поля:
SELECT field1, field2 FROM tableName;

Например, я написал запрос:
SELECT id, name FROM good;

Это позволило мне вывести только ID и название товаров.
Изменение названий полей
Я освоил изменение имён полей с помощью ключевого слова AS:
SELECT field1 AS f1, field2 AS f2 FROM tableName;

В MySQL можно опустить AS:
SELECT field1 f1, field2 f2 FROM tableName;

Я применил это к таблице good:
SELECT name AS goodName, price AS goodPrice FROM good;

Изменение выводимых данных
Я научился выполнять арифметические операции в SELECT-запросах:
SELECT (field1 + field2) AS total FROM tableName;

Я написал запрос для таблицы good, чтобы посчитать стоимость товаров с учётом количества:
SELECT (price * count) AS totalCost FROM good;

Фильтрация данных с WHERE
Я изучил фильтрацию данных с помощью оператора WHERE. Например, я вывел товары, которых нет на складе:
SELECT id, name FROM good WHERE count = 0;

Я также применил условия "больше", "меньше", "не равно":
SELECT id, name FROM good WHERE count <= 50;
SELECT * FROM order_status WHERE code != 'NEW';

Для работы со строками я использовал одинарные кавычки, а для дат — формат YYYY-MM-DD:
SELECT id, name, reg_date FROM user WHERE reg_date >= '2019-01-01';

Фильтрация по диапазону
Я освоил фильтрацию по диапазону с помощью AND и BETWEEN:
SELECT * FROM user WHERE reg_date >= '2021-09-08 00:00:00' AND reg_date <= '2021-09-08 23:59:59';
SELECT * FROM user WHERE reg_date BETWEEN '2021-09-08 00:00:00' AND '2021-09-08 23:59:59';

Оба запроса вывели пользователей, зарегистрированных 8 сентября 2021 года.
2. Сортировка и группировка результатов
Сортировка с ORDER BY
Я научился сортировать данные с помощью ORDER BY:
SELECT * FROM good ORDER BY name;

По умолчанию сортировка происходит по возрастанию (ASC), но можно указать DESC для убывания:
SELECT * FROM good ORDER BY name DESC;

Я также освоил сортировку по нескольким полям:
SELECT * FROM good ORDER BY category_id, name DESC;

Ограничение количества записей с LIMIT
Я изучил оператор LIMIT для ограничения количества записей:
SELECT * FROM good LIMIT 10;

Я комбинировал его с ORDER BY, например, для вывода топ-5 дорогих товаров:
SELECT * FROM good ORDER BY price DESC LIMIT 5;

Для постраничной навигации я использовал два параметра:
SELECT * FROM good LIMIT 20, 10;

Это вывело 10 записей, начиная с 21-й.
Фильтрация по уникальности с DISTINCT
Я научился отбирать уникальные записи с помощью DISTINCT:
SELECT DISTINCT status_id FROM `order` WHERE creation_date BETWEEN '2019-01-01' AND '2019-12-31';

Этот запрос вывел уникальные статусы заказов за 2019 год. Я также применил DISTINCT к нескольким полям:
SELECT DISTINCT src_status_id, dst_status_id FROM order_status_change;

Группировка с GROUP BY
Я освоил группировку с помощью GROUP BY:
SELECT category_id, name FROM good GROUP BY category_id;

Я также использовал агрегацию для подсчёта:
SELECT category_id, COUNT(*) AS count FROM good GROUP BY category_id;

Для группировки по нескольким полям:
SELECT src_status_id, dst_status_id, COUNT(*) AS count FROM order_status_change GROUP BY src_status_id, dst_status_id;

Я комбинировал группировку и сортировку:
SELECT category_id, name, COUNT(*) AS count FROM good GROUP BY category_id ORDER BY count DESC;

3. Объединение таблиц и результатов
Объединение таблиц с JOIN
Я изучил оператор JOIN для объединения таблиц. Например, я вывел названия товаров и их категорий:
SELECT good_category.name AS categoryName, good.name AS goodName
FROM good
JOIN good_category ON good_category.id = good.category_id;

Я использовал псевдонимы для таблиц:
SELECT c.name AS categoryName, g.name AS goodName
FROM good g
JOIN good_category c ON c.id = g.category_id;

Типы JOIN
Я освоил три типа JOIN:

INNER JOIN: выводит только записи, присутствующие в обеих таблицах.
LEFT JOIN: выводит все записи из первой таблицы, добавляя NULL для несоответствующих записей второй.
RIGHT JOIN: выводит все записи из второй таблицы, добавляя NULL для несоответствующих записей первой.Я написал запрос с LEFT JOIN для вывода товаров, даже если их категория отсутствует:

SELECT g.name, c.name
FROM good g
LEFT JOIN good_category c ON c.id = g.category_id;

Множественные JOIN
Я выполнил задание по объединению нескольких таблиц, чтобы вывести товары, их категории, даты заказов и имена заказчиков:
SELECT g.name, gc.name, o.creation_date, u.name
FROM good g
JOIN good_category gc ON gc.id = g.category_id
JOIN order2good o2g ON o2g.good_id = g.id
JOIN `order` o ON o.id = o2g.order_id
JOIN user u ON u.id = o.user_id;

Объединение результатов с UNION
Я научился объединять результаты запросов с помощью UNION. Например, я вывел заказы в статусах APPROVED_BY_STOCK и PACKED, заказы пользователей, зарегистрированных в феврале 2018 года, и заказы с йогуртами:
SELECT o.id, o.creation_date
FROM `order` o
JOIN order_status s ON s.id = o.status_id
WHERE s.code IN ('APPROVED_BY_STOCK', 'PACKED')
UNION
SELECT o.id, o.creation_date
FROM `order` o
JOIN user u ON u.id = o.user_id
WHERE u.reg_date BETWEEN '2018-02-01' AND '2018-02-28'
UNION
SELECT o.id, o.creation_date
FROM good g
JOIN order2good o2g ON o2g.good_id = g.id
JOIN `order` o ON o.id = o2g.order_id
WHERE g.name LIKE '%йогурт%';

4. Запросы изменения данных
Добавление данных с INSERT
Я изучил оператор INSERT:
INSERT INTO good (category_id, name, count, price)
VALUES ('6', 'Белый чай с вишней', '50', '344');

Я использовал свойство AUTO_INCREMENT для автоматического увеличения id, исключив его из запроса. Также я добавил несколько записей одним запросом:
INSERT INTO tbl (name, price)
VALUES ('Белый чай', '269'), ('Красный чай', '400'), ('Зелёный чай', '204');

Изменение данных с UPDATE
Я освоил оператор UPDATE:
UPDATE good SET name = 'Конфета' WHERE id = 1055;

Я также написал сложный запрос:
UPDATE `order` SET user_id = NULL, status_id = 1
WHERE user_id > 10 AND user_id < 50 AND creation_date > '2019-01-01';

Удаление данных с DELETE
Я научился удалять записи с помощью DELETE:
DELETE FROM good WHERE id = 281;

5. Структурные запросы
Управление базами данных
Я изучил команды для работы с базами данных:

Просмотр списка баз: SHOW DATABASES;
Выбор базы: USE databaseName;
Создание базы: CREATE DATABASE databaseName;
Удаление базы: DROP DATABASE databaseName;

Управление таблицами
Я освоил команды для работы с таблицами:

Просмотр списка таблиц: SHOW TABLES;
Просмотр структуры таблицы: DESCRIBE tableName;
Создание таблицы:

CREATE TABLE good_type (
    id INT NOT NULL AUTO_INCREMENT,
    sort_index INT,
    name VARCHAR(255),
    PRIMARY KEY(id)
);


Изменение таблицы:

ALTER TABLE good_type
DROP COLUMN name,
ADD code TEXT NOT NULL AFTER id;


Очистка таблицы с сбросом AUTO_INCREMENT: TRUNCATE tableName;
Удаление таблицы: DROP TABLE tableName;

Я выполнил эти команды в phpMyAdmin и в командной строке, чтобы сравнить оба подхода.

Вывод и обобщение
Что было изучено
Я изучил основы реляционных баз данных, их структуру (таблицы, поля, записи) и принципы организации данных, включая минимизацию дублирования через связи. Я освоил типы полей (числовые, даты, текстовые, JSON) и типы связей ("один ко многим", "один к одному", "многие ко многим"). Я познакомился с языком SQL, его возможностями и синтаксисом, включая SELECT-, INSERT-, UPDATE-, DELETE- и структурные запросы. Я научился работать с MySQL через phpMyAdmin, управлять базами данных и таблицами, а также анализировать дампы.
Что было сделано
Я изучил теоретические материалы по РБД и SQL, включая типы полей, связей и синтаксис запросов. Я зарегистрировался на хостинге Timeweb, настроил базу данных MySQL и загрузил дамп через phpMyAdmin. Я выполнил практические задания: написал SELECT-запросы с фильтрацией, сортировкой, группировкой и объединением таблиц (JOIN, UNION); создал, изменил и удалил данные с помощью INSERT, UPDATE, DELETE; управлял структурой базы данных через команды CREATE, ALTER, DROP. Я также сравнил выполнение запросов в phpMyAdmin и командной строке.
Результаты
Я успешно освоил работу с реляционными базами данных и языком SQL. Я научился эффективно организовывать данные, минимизируя дублирование, и управлять ими с помощью различных запросов. Практические задания помогли мне закрепить навыки написания SQL-запросов, анализа структуры баз данных и выявления потенциальных уязвимостей, таких как отсутствие ограничений доступа к структурным запросам.
Заключение
Изучение раздела "Реляционные базы данных и язык запросов SQL" дало мне глубокое понимание работы РБД, их структуры и управления данными с помощью SQL. Я приобрёл практические навыки работы с MySQL, phpMyAdmin и SQL-запросами, которые помогут мне в дальнейшем изучении безопасности баз данных. Эти знания станут основой для анализа уязвимостей и обеспечения защиты данных в роли специалиста по кибербезопасности.
