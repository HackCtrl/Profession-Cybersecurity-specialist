1. Введение в базы данных
Введение
В рамках курса "Специалист по кибербезопасности", в модуле "Безопасность баз данных", я изучил тему "Введение в базы данных". Этот раздел стал для меня важным шагом в понимании основ работы баз данных (БД), их типов, 
классификаций и особенностей с точки зрения кибербезопасности. Я глубоко погрузился в теоретические аспекты, познакомился с популярными системами управления базами данных (СУБД), изучил, как базы данных размещаются в 
разных окружениях, и выполнил практическую работу, чтобы применить полученные знания на практике. В этом обобщении я подробно опишу весь процесс изучения, включая шаги, которые я предпринял, выводы, которые сделал, и 
практическую работу, которую выполнил.

Основные концепции
1. Основы баз данных
Я начал с изучения базового понятия баз данных. Базы данных — это специализированное программное обеспечение, предназначенное для хранения, управления и обработки данных. Я узнал, что базы данных делятся на два основных 
типа: реляционные (SQL) и нереляционные (NoSQL). Реляционные базы данных, такие как Oracle, MySQL, MS SQL и PostgreSQL, используют таблицы и язык запросов SQL для работы с данными. Нереляционные базы данных, такие как 
MongoDB или HBase, предназначены для работы с большими объёмами данных и обеспечивают высокую скорость и масштабируемость.
Я также изучил, почему понимание баз данных важно для кибербезопасности. Злоумышленники могут использовать особенности конкретных типов БД для атак, поэтому специалисты по безопасности должны знать, как эти базы 
устроены, чтобы защищать их. Например, я понял, что реляционные БД часто уязвимы к SQL-инъекциям, а нереляционные — к атакам, связанным с неправильной настройкой доступа.
2. Типы баз данных
Далее я углубился в изучение различных типов баз данных. Реляционные базы данных хранят данные в виде таблиц с чётко определённой структурой, где каждая строка — это запись, а каждый столбец — это поле. Примеры таких БД: 
Oracle, MySQL, MS SQL и PostgreSQL. Я узнал, что эти базы данных популярны в традиционных приложениях, таких как банковские системы или системы управления персоналом.
Нереляционные базы данных (NoSQL) более гибкие и подходят для современных высоконагруженных систем. Я изучил их разновидности:

Ключ-значение (HBase): используются для простого хранения данных, например, для кэширования.
Документные (MongoDB): хранят данные в формате JSON или XML, подходят для каталогов или блогов.
Графовые: используются для сложных взаимосвязей, например, в социальных сетях.
Колоночные (ClickHouse): оптимизированы для аналитики, например, для обработки больших объёмов повторяющихся данных.
Временных рядов: подходят для хранения данных с временными метками, например, в системах мониторинга.

Я также изучил рейтинг популярности СУБД на начало 2022 года по данным сайта DB-Engines: среди реляционных лидируют Oracle, MySQL, MS SQL и PostgreSQL, а среди нереляционных — MongoDB. Это помогло мне понять, какие СУБД 
чаще всего используются в реальных проектах.
3. Классификации баз данных
Я подробно разобрал классификации баз данных, чтобы понять, как их можно систематизировать. Вот основные категории, которые я изучил:

По модели данных: иерархическая (данные организованы в виде дерева), сетевая (данные связаны через указатели), реляционная (таблицы).
По доступу пользователей: многопользовательский доступ (много пользователей одновременно, например, в Oracle), монопольный доступ (один пользователь, например, в SQLite).
По расположению: on-premise (на серверах компании), облако (у провайдера), мобильные устройства (на смартфонах).
По распределённости: централизованная (данные на одном сервере), кластерная (данные распределены по узлам, например, в HBase).
По типу нагрузки: OLTP (операционная обработка, например, транзакции), OLAP (аналитика, например, отчёты).
По механизму хранения: строковое (данные хранятся построчно, как в Oracle), колоночное (данные хранятся по столбцам, как в ClickHouse).

Я понял, что одна база данных может соответствовать нескольким классификациям. Например, Oracle может быть установлена как on-premise, так и в облаке, и использоваться как для OLTP, так и для OLAP.
4. Популярные системы управления базами данных
Я изучил характеристики популярных СУБД, чтобы понять их особенности и области применения:

PostgreSQL: реляционная, сетевая, open-source. Гибкая в настройках, подходит для сложных запросов, часто устанавливается on-premise.
Oracle RDBMS: реляционная, сетевая, проприетарная. Высокая надёжность и производительность, популярна в банковском секторе.
HBase: NoSQL (ключ-значение), кластерная, open-source. Высокая производительность при масштабировании, используется для больших данных.
ClickHouse: NoSQL (колоночная), сетевая, open-source. Оптимизирована для аналитики в реальном времени.
SQLite: реляционная, монопольная, free. Используется на мобильных устройствах, хранит данные в одном файле.
MongoDB: NoSQL (документная), сетевая, free. Подходит для хранения контента, например, в каталогах или блогах.
LiteDB: NoSQL (документная), free. Простая база для мобильных устройств и браузеров.
MS SQL: реляционная, сетевая, проприетарная. Оптимизирована для OLAP, работает в облаке.

Я также изучил российские СУБД, такие как ЛИНТЕР, Postgres Pro, Jatoba и Ред, которые входят в реестр отечественного ПО. Это важно для проектов, где требуется использование российского ПО.
5. Размещение баз данных
Я подробно разобрал, как базы данных размещаются в разных окружениях, и какие особенности это влечёт для кибербезопасности.
On-premise
On-premise — это размещение БД на собственных или арендованных серверах компании. Я изучил три варианта развёртывания:

Локальная установка: БД устанавливается напрямую на сервер.
Виртуализация: БД работает в виртуальной машине, что упрощает управление, но требует больше ресурсов.
Контейнеризация: БД запускается в контейнере, например, с помощью Docker, что удобно для тестирования.

Я выполнил практическое задание по запуску PostgreSQL в Docker. Сначала я установил Docker на локальной машине, используя официальный сайт Docker для загрузки. Затем я скачал образ PostgreSQL с помощью команды:
docker pull postgres

После этого я запустил контейнер:
docker run --name my-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres

Я проверил, что база работает, подключившись к ней и выполнив тестовый запрос. Это дало мне понимание, как контейнеризация упрощает развёртывание БД.
Облако
Облачные БД размещаются на инфраструктуре провайдера. Я изучил, что этот подход стал популярен с 2000-х годов, и к 2022 году многие компании перенесли свои БД в облако. Я разобрал три варианта:

PaaS (Platform as a Service): компания сама настраивает БД на сервере провайдера.
SaaS (Software as a Service): компания получает готовый сервис.
DBaaS (Database as a Service): специализированный сервис для баз данных.

Я узнал, что в облаке важно обращать внимание на разграничение доступов, защиту резервных копий и соответствие требованиям законодательства. Например, данные, хранящиеся в облаке, должны соответствовать законам о 
защите персональных данных.
Мобильные устройства
Мобильные БД работают на смартфонах и планшетах. Я изучил их особенности:

Меньше функций: мобильные БД, такие как SQLite, имеют ограниченный функционал.
Слабая защита: механизмы аутентификации и защиты на файловом уровне менее развиты.
Риск перехвата: данные могут быть перехвачены через Wi-Fi, если не использовать шифрование.

Я изучил популярные решения:

SQLite: реляционная БД, стандарт для Android, хранит данные в одном файле.
Firebase: NoSQL-база, предоставляет синхронизацию данных между устройством и сервером.
Realm: более быстрая альтернатива SQLite, используется в iOS.

Я также узнал о уязвимостях мобильных БД, таких как хранение данных в незащищённых областях или передача данных по незашифрованным каналам. Для защиты я изучил меры, например, использование шифрованных протоколов и 
хранение данных в защищённых хранилищах ОС.
6. Сравнение баз данных
Я изучил сравнение СУБД с точки зрения безопасности. Например, я рассмотрел характеристики Jatoba, PostgreSQL, Postgres Pro и Oracle:

Jatoba: российская СУБД, поддерживает расширенные парольные политики, ограничение доступа на уровне строк.
PostgreSQL: open-source, поддерживает базовые функции безопасности, но не имеет ограничений доступа администратора.
Oracle: проприетарная, имеет встроенные механизмы защиты, но требует лицензии.

Я понял, что выбор СУБД зависит от требований проекта, включая безопасность, производительность и соответствие законодательству.

Практическая работа: Классификация баз данных и создание схемы
Классификация баз данных
Я выполнил задание по классификации баз данных. Для каждой из указанных СУБД я определил признаки по четырём категориям: способ хранения, доступ пользователей, расположение, тип нагрузки.
Oracle RDBMS

Способ хранения: строковое (данные хранятся в виде строк в таблицах).
Доступ пользователей: многопользовательский (поддерживает одновременную работу многих пользователей).
Расположение: on-premise или облако (может быть установлена на серверах компании или у провайдера).
Тип нагрузки: OLTP или OLAP (подходит как для транзакций, так и для аналитики).

HBase

Способ хранения: ключ-значение (NoSQL, хранит данные в виде пар ключ-значение).
Доступ пользователей: многопользовательский (работает в кластере с множеством узлов).
Расположение: кластерная (распределённая система).
Тип нагрузки: OLAP (используется для аналитики больших данных).

ClickHouse

Способ хранения: колоночное (данные хранятся по столбцам для быстрой аналитики).
Доступ пользователей: многопользовательский (поддерживает работу многих пользователей).
Расположение: on-premise или облако (может быть установлена локально или у провайдера).
Тип нагрузки: OLAP (оптимизирована для аналитических запросов).

SQLite

Способ хранения: строковое (реляционная база, данные хранятся в виде строк).
Доступ пользователей: монопольный (один пользователь, так как используется на устройствах).
Расположение: мобильные устройства (устанавливается на смартфоны).
Тип нагрузки: OLTP (для операционной обработки данных).

MongoDB

Способ хранения: документное (хранит данные в формате JSON).
Доступ пользователей: многопользовательский (поддерживает работу многих пользователей).
Расположение: облако (часто используется в облачных сервисах).
Тип нагрузки: OLTP (для операционной обработки, например, в каталогах).

MS SQL

Способ хранения: строковое (реляционная база, данные хранятся в виде строк).
Доступ пользователей: многопользовательский (для работы многих пользователей).
Расположение: облако (часто используется в облачных решениях).
Тип нагрузки: OLAP (оптимизирована для аналитики).

Создание схемы окружения БД
Я выполнил задание по созданию схемы окружения БД на основе описания инфраструктуры. Вот как я это сделал.
Описание инфраструктуры
Я проанализировал следующую инфраструктуру:

Web-сервер: работает на Windows Server 2018, принимает подключения по порту 443 (HTTPS), установлен антивирус Касперского.
БД: работает на Red Hat Linux, IP-адрес 192.168.0.45, принимает подключения по порту 5432, доступ администратора только по SSH из внутреннего сегмента.
Администратор: подключается к БД по SSH и к web-серверу по RDP.
Клиенты: подключаются через браузер (https://skillbox.ru) и через мобильное приложение (REST API, порт 443).
Резервные копии: хранятся в облачном хранилище, копирование по SFTP, но логин и пароль хранятся в скрипте в открытом виде.

Построение схемы
Я описал схему окружения, выделив ключевые элементы:

Web-сервер: Windows Server 2018, порт 443 (HTTPS), защищён антивирусом Касперского. Принимает подключения от клиентов через браузер и мобильное приложение.
БД: Red Hat Linux, IP 192.168.0.45, порт 5432. Доступ только из внутреннего сегмента по SSH. Взаимодействует только с web-сервером.
Администратор: подключается к БД по SSH (порт 22) из внутреннего сегмента и к web-серверу по RDP.
Клиенты: через браузер (HTTPS, порт 443) и мобильное приложение (REST API, порт 443). Приложение использует персональные данные (ФИО, паспорт, фото).
Резервные копии: копируются в облако по SFTP, но пароли в скрипте хранятся в открытом виде (уязвимость).

Определение СУБД
Я предположил, что используется PostgreSQL, так как порт 5432 — это стандартный порт для PostgreSQL. Это также соответствует описанию, где указано, что БД работает на Linux.
Выявление уязвимости
Я выявил уязвимость: логин и пароль для подключения к БД и облачному хранилищу хранятся в открытом виде в скрипте резервного копирования. Это создаёт риск утечки данных, так как злоумышленник, получив доступ к 
скрипту, может использовать эти данные для несанкционированного доступа.
Рекомендации
Для устранения уязвимости я предложил хранить пароли в зашифрованном виде, например, используя переменные окружения или специализированные инструменты управления секретами, такие как HashiCorp Vault.

Вывод и обобщение
Что было изучено
Я изучил основы баз данных, их типы (SQL и NoSQL) и разновидности (ключ-значение, документные, графовые, колоночные, временных рядов). Я разобрал классификации БД по модели данных, доступу, расположению, 
распределённости, типу нагрузки и механизму хранения. Я познакомился с популярными СУБД (PostgreSQL, Oracle, MongoDB и др.), их характеристиками и областями применения. Я также изучил особенности размещения БД 
(on-premise, облако, мобильные устройства) и связанные с этим уязвимости, особенно для мобильных БД, где велик риск перехвата данных.
Что было сделано
Я изучил теоретические материалы, подробно разобрал характеристики различных СУБД и их классификации. Я выполнил практическое задание по запуску PostgreSQL в Docker, установив Docker, скачав образ и проверив работу 
базы. Я классифицировал шесть СУБД (Oracle, HBase, ClickHouse, SQLite, MongoDB, MS SQL) по четырём признакам. Я создал схему окружения БД, проанализировал инфраструктуру, определил используемую СУБД (PostgreSQL) и 
выявил уязвимость в виде незащищённых паролей в скрипте.
Результаты
Я успешно выполнил все задания, закрепив знания о базах данных и их безопасности. Я научился классифицировать БД, анализировать инфраструктуру и выявлять уязвимости. Практическая работа показала, как теоретические 
знания применяются на практике, особенно в части анализа рисков.
Заключение
Изучение темы "Введение в базы данных" дало мне глубокое понимание работы баз данных, их типов, классификаций и уязвимостей. Я освоил навыки анализа инфраструктуры, выявления рисков и работы с СУБД, таких как 
PostgreSQL. Эти знания и навыки станут основой для дальнейшего изучения безопасности баз данных и помогут мне в работе специалиста по кибербезопасности.
